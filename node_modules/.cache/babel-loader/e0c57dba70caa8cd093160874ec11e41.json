{"ast":null,"code":"import axios from 'axios';\nvar headers = {\n  headers: {\n    'Access-Control-Allow-Origin': '*'\n  }\n};\nexport default function (user) {\n  return new Promise(function (resolve, reject) {\n    var newToken;\n    var api_uri = 'http://localhost:8080/GatewayApi/users/signToken';\n    axios.post(api_uri, {\n      user: user,\n      headers: headers\n    }).then(function (res) {\n      if (res.data.hasBeenSuccessful === true) {\n        console.log(newTOken);\n        newToken = res.data.content.token;\n      }\n\n      resolve(newToken);\n    }).catch(function (error) {\n      return reject(error.message);\n    });\n  });\n}","map":{"version":3,"sources":["D:\\University\\Frontend-340CT\\frontend340ct\\src\\utils\\generateToken.js"],"names":["axios","headers","user","Promise","resolve","reject","newToken","api_uri","post","then","res","data","hasBeenSuccessful","console","log","newTOken","content","token","catch","error","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG;AACZA,EAAAA,OAAO,EAAE;AACL,mCAA+B;AAD1B;AADG,CAAhB;AAMA,eAAe,UAASC,IAAT,EAAe;AAC1B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAIC,QAAJ;AACA,QAAMC,OAAO,GAAG,kDAAhB;AACAP,IAAAA,KAAK,CAACQ,IAAN,CAAWD,OAAX,EAAoB;AAChBL,MAAAA,IAAI,EAAJA,IADgB;AAEhBD,MAAAA,OAAO,EAAPA;AAFgB,KAApB,EAICQ,IAJD,CAIM,UAAAC,GAAG,EAAI;AACT,UAAIA,GAAG,CAACC,IAAJ,CAASC,iBAAT,KAA+B,IAAnC,EAAwC;AACpCC,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACAT,QAAAA,QAAQ,GAAGI,GAAG,CAACC,IAAJ,CAASK,OAAT,CAAiBC,KAA5B;AACH;;AACDb,MAAAA,OAAO,CAACE,QAAD,CAAP;AACH,KAVD,EAWCY,KAXD,CAWO,UAAAC,KAAK;AAAA,aAAId,MAAM,CAACc,KAAK,CAACC,OAAP,CAAV;AAAA,KAXZ;AAYH,GAfM,CAAP;AAgBH","sourcesContent":["import axios from 'axios';\r\n\r\nconst headers = {\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n};\r\n\r\nexport default function(user) {\r\n    return new Promise((resolve, reject) => {\r\n        let newToken;\r\n        const api_uri = 'http://localhost:8080/GatewayApi/users/signToken';\r\n        axios.post(api_uri, {\r\n            user,\r\n            headers\r\n        })\r\n        .then(res => {\r\n            if (res.data.hasBeenSuccessful === true){\r\n                console.log(newTOken);\r\n                newToken = res.data.content.token;\r\n            }\r\n            resolve(newToken);\r\n        })\r\n        .catch(error => reject(error.message));\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}