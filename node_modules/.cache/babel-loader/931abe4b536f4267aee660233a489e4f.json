{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['exports', 'react', 'prop-types', 'react-bootstrap/lib/Button', 'react-bootstrap/lib/Modal'], factory);\n  } else if (typeof exports !== 'undefined') {\n    factory(exports, require('react'), require('prop-types'), require('react-bootstrap/lib/Button'), require('react-bootstrap/lib/Modal'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.React, global.PropTypes, global.Button, global.Modal);\n    global.Confirm = mod.exports;\n  }\n})(this, function (exports, _react, _propTypes, _Button, _Modal) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Confirm = undefined;\n\n  var _react2 = _interopRequireDefault(_react);\n\n  var _propTypes2 = _interopRequireDefault(_propTypes);\n\n  var _Button2 = _interopRequireDefault(_Button);\n\n  var _Modal2 = _interopRequireDefault(_Modal);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var Confirm = function (_React$Component) {\n    _inherits(Confirm, _React$Component);\n\n    function Confirm(props) {\n      _classCallCheck(this, Confirm);\n\n      var _this = _possibleConstructorReturn(this, (Confirm.__proto__ || Object.getPrototypeOf(Confirm)).call(this, props));\n\n      _this.state = {\n        isOpened: props.visible\n      };\n      _this.onButtonClick = _this.onButtonClick.bind(_this);\n      _this.onClose = _this.onClose.bind(_this);\n      _this.onConfirm = _this.onConfirm.bind(_this);\n      return _this;\n    }\n\n    _createClass(Confirm, [{\n      key: 'onButtonClick',\n      value: function onButtonClick() {\n        // Since the modal is inside the button click events will propagate up.\n        if (!this.state.isOpened) {\n          this.setState({\n            isOpened: true\n          });\n        }\n      }\n    }, {\n      key: 'onClose',\n      value: function onClose(event) {\n        if (event) {\n          event.stopPropagation();\n        }\n\n        this.setState({\n          isOpened: false\n        });\n\n        if (typeof this.props.onClose === 'function') {\n          this.props.onClose();\n        }\n      }\n    }, {\n      key: 'onConfirm',\n      value: function onConfirm(event) {\n        event.stopPropagation();\n        this.setState({\n          isOpened: false\n        });\n        this.props.onConfirm();\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var cancelButton = this.props.showCancelButton ? _react2.default.createElement(_Button2.default, {\n          bsStyle: 'default',\n          onClick: this.onClose\n        }, this.props.cancelText) : null;\n\n        var modal = _react2.default.createElement(_Modal2.default, {\n          show: this.state.isOpened,\n          onHide: this.onClose,\n          className: this.props.className,\n          dialogClassName: this.props.dialogClassName,\n          keyboard: this.props.keyboard,\n          backdrop: this.props.backdrop,\n          enforceFocus: this.props.enforceFocus\n        }, _react2.default.createElement(_Modal2.default.Header, null, _react2.default.createElement(_Modal2.default.Title, null, this.props.title)), _react2.default.createElement(_Modal2.default.Body, null, this.props.body), _react2.default.createElement(_Modal2.default.Footer, null, cancelButton, _react2.default.createElement(_Button2.default, {\n          bsStyle: this.props.confirmBSStyle,\n          onClick: this.onConfirm\n        }, this.props.confirmText)));\n\n        var content;\n\n        if (this.props.children) {\n          var btn = _react2.default.Children.only(this.props.children);\n\n          content = _react2.default.cloneElement(btn, {\n            onClick: this.onButtonClick,\n            style: this.props.style\n          }, btn.props.children, modal);\n        } else {\n          content = _react2.default.createElement(_Button2.default, {\n            onClick: this.onButtonClick,\n            style: this.props.style\n          }, this.props.buttonText, modal);\n        }\n\n        return content;\n      }\n    }]);\n\n    return Confirm;\n  }(_react2.default.Component);\n\n  Confirm.propTypes = {\n    body: _propTypes2.default.node.isRequired,\n    buttonText: _propTypes2.default.node,\n    cancelText: _propTypes2.default.node,\n    className: _propTypes2.default.string,\n    confirmBSStyle: _propTypes2.default.string,\n    confirmText: _propTypes2.default.node,\n    dialogClassName: _propTypes2.default.string,\n    keyboard: _propTypes2.default.bool,\n    backdrop: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),\n    enforceFocus: _propTypes2.default.bool,\n    onConfirm: _propTypes2.default.func.isRequired,\n    onClose: _propTypes2.default.func,\n    showCancelButton: _propTypes2.default.bool.isRequired,\n    title: _propTypes2.default.node.isRequired,\n    visible: _propTypes2.default.bool\n  };\n  Confirm.defaultProps = {\n    cancelText: 'Cancel',\n    confirmText: 'Confirm',\n    confirmBSStyle: 'danger',\n    showCancelButton: true\n  };\n  exports.Confirm = Confirm;\n  exports.default = Confirm;\n});","map":null,"metadata":{},"sourceType":"script"}