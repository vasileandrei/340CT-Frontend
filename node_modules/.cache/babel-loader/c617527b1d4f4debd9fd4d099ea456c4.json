{"ast":null,"code":"import axios from 'axios';\nimport setAuthorizationHeader from './../utils/setAuthorizationToken';\nimport { LOGIN_REQ, REGISTER_REQ } from './types';\nvar headers = {\n  headers: {\n    'Access-Control-Allow-Origin': '*'\n  }\n};\nvar notFoundStatus = 404;\nexport default function (action, username, password, email) {\n  if (action === LOGIN_REQ) {\n    return new Promise(function (resolve, reject) {\n      var message;\n      var redirect = false;\n      var api_uri = 'http://localhost:8080/GatewayApi/users/login';\n      axios.post(api_uri, {\n        username: username,\n        password: password,\n        headers: headers,\n        json: true\n      }).then(function (res) {\n        if (res.data.hasBeenSuccessful === true) {\n          message = res.data.content.message;\n          redirect = true;\n          var token = res.data.content.token;\n          localStorage.setItem('jwtToken', token);\n          setAuthorizationHeader(token);\n        } else if (res.data.errors.statusCode === notFoundStatus) {\n          message = 'Username and password don\\'t match';\n        }\n\n        resolve([message, redirect]);\n      }).catch(function (error) {\n        return reject(error.message);\n      });\n    });\n  } else if (action === REGISTER_REQ) {\n    return new Promise(function (resolve, reject) {\n      var message;\n      var redirect = false;\n      var api_uri = 'http://localhost:8080/GatewayApi/users/register';\n      axios.post(api_uri, {\n        username: username,\n        password: password,\n        email: email,\n        headers: headers,\n        json: true\n      }).then(function (res) {\n        if (res.data.hasBeenSuccessful === true) {\n          redirect = true;\n          message = res.data.content.message;\n        } else {\n          message = res.data.errors.error.message;\n        }\n\n        resolve([message, redirect]);\n      }).catch(function (error) {\n        return reject(error.message);\n      });\n    });\n  }\n}","map":{"version":3,"sources":["D:\\University\\Frontend-340CT\\frontend340ct\\src\\actions\\axiosRequests.js"],"names":["axios","setAuthorizationHeader","LOGIN_REQ","REGISTER_REQ","headers","notFoundStatus","action","username","password","email","Promise","resolve","reject","message","redirect","api_uri","post","json","then","res","data","hasBeenSuccessful","content","token","localStorage","setItem","errors","statusCode","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,sBAAP,MAAmC,kCAAnC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,SAAxC;AAEA,IAAMC,OAAO,GAAG;AACZA,EAAAA,OAAO,EAAE;AACL,mCAA+B;AAD1B;AADG,CAAhB;AAMA,IAAMC,cAAc,GAAG,GAAvB;AAEA,eAAe,UAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,KAArC,EAA4C;AACvD,MAAIH,MAAM,KAAKJ,SAAf,EAA0B;AACtB,WAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,UAAIC,OAAJ;AACA,UAAIC,QAAQ,GAAG,KAAf;AACA,UAAMC,OAAO,GAAG,8CAAhB;AACAf,MAAAA,KAAK,CAACgB,IAAN,CAAWD,OAAX,EAAoB;AAChBR,QAAAA,QAAQ,EAARA,QADgB;AAEhBC,QAAAA,QAAQ,EAARA,QAFgB;AAGhBJ,QAAAA,OAAO,EAAPA,OAHgB;AAIhBa,QAAAA,IAAI,EAAE;AAJU,OAApB,EAMCC,IAND,CAMM,UAAAC,GAAG,EAAI;AACT,YAAIA,GAAG,CAACC,IAAJ,CAASC,iBAAT,KAA+B,IAAnC,EAAwC;AACpCR,UAAAA,OAAO,GAAGM,GAAG,CAACC,IAAJ,CAASE,OAAT,CAAiBT,OAA3B;AACAC,UAAAA,QAAQ,GAAG,IAAX;AACA,cAAMS,KAAK,GAAGJ,GAAG,CAACC,IAAJ,CAASE,OAAT,CAAiBC,KAA/B;AACAC,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAtB,UAAAA,sBAAsB,CAACsB,KAAD,CAAtB;AACH,SAND,MAMO,IAAIJ,GAAG,CAACC,IAAJ,CAASM,MAAT,CAAgBC,UAAhB,KAA+BtB,cAAnC,EAAkD;AACrDQ,UAAAA,OAAO,GAAG,oCAAV;AACH;;AACDF,QAAAA,OAAO,CAAC,CAACE,OAAD,EAAUC,QAAV,CAAD,CAAP;AACH,OAjBD,EAkBCc,KAlBD,CAkBO,UAAAC,KAAK;AAAA,eAAIjB,MAAM,CAACiB,KAAK,CAAChB,OAAP,CAAV;AAAA,OAlBZ;AAmBH,KAvBM,CAAP;AAwBH,GAzBD,MAyBO,IAAIP,MAAM,KAAKH,YAAf,EAA6B;AAChC,WAAO,IAAIO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,UAAIC,OAAJ;AACA,UAAIC,QAAQ,GAAG,KAAf;AACA,UAAMC,OAAO,GAAG,iDAAhB;AACAf,MAAAA,KAAK,CAACgB,IAAN,CAAWD,OAAX,EAAoB;AAChBR,QAAAA,QAAQ,EAARA,QADgB;AAEhBC,QAAAA,QAAQ,EAARA,QAFgB;AAGhBC,QAAAA,KAAK,EAALA,KAHgB;AAIhBL,QAAAA,OAAO,EAAPA,OAJgB;AAKhBa,QAAAA,IAAI,EAAE;AALU,OAApB,EAOCC,IAPD,CAOM,UAAAC,GAAG,EAAI;AACT,YAAIA,GAAG,CAACC,IAAJ,CAASC,iBAAT,KAA+B,IAAnC,EAAwC;AACpCP,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,OAAO,GAAGM,GAAG,CAACC,IAAJ,CAASE,OAAT,CAAiBT,OAA3B;AACH,SAHD,MAGO;AACHA,UAAAA,OAAO,GAAGM,GAAG,CAACC,IAAJ,CAASM,MAAT,CAAgBG,KAAhB,CAAsBhB,OAAhC;AACH;;AACDF,QAAAA,OAAO,CAAC,CAACE,OAAD,EAAUC,QAAV,CAAD,CAAP;AACH,OAfD,EAgBCc,KAhBD,CAgBO,UAAAC,KAAK;AAAA,eAAIjB,MAAM,CAACiB,KAAK,CAAChB,OAAP,CAAV;AAAA,OAhBZ;AAiBH,KArBM,CAAP;AAsBH;AACJ","sourcesContent":["import axios from 'axios';\r\nimport setAuthorizationHeader from './../utils/setAuthorizationToken';\r\nimport { LOGIN_REQ, REGISTER_REQ } from './types';\r\n\r\nconst headers = {\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n};\r\n\r\nconst notFoundStatus = 404;\r\n\r\nexport default function(action, username, password, email) {\r\n    if (action === LOGIN_REQ) {\r\n        return new Promise((resolve, reject) => {\r\n            let message;\r\n            let redirect = false;\r\n            const api_uri = 'http://localhost:8080/GatewayApi/users/login';\r\n            axios.post(api_uri, {\r\n                username,\r\n                password,\r\n                headers,\r\n                json: true\r\n            })\r\n            .then(res => {\r\n                if (res.data.hasBeenSuccessful === true){\r\n                    message = res.data.content.message;\r\n                    redirect = true;\r\n                    const token = res.data.content.token;\r\n                    localStorage.setItem('jwtToken', token);\r\n                    setAuthorizationHeader(token);\r\n                } else if (res.data.errors.statusCode === notFoundStatus){\r\n                    message = 'Username and password don\\'t match';\r\n                }\r\n                resolve([message, redirect]);\r\n            })\r\n            .catch(error => reject(error.message));\r\n        });\r\n    } else if (action === REGISTER_REQ) {\r\n        return new Promise((resolve, reject) => {\r\n            let message;\r\n            let redirect = false;\r\n            const api_uri = 'http://localhost:8080/GatewayApi/users/register';\r\n            axios.post(api_uri, {\r\n                username,\r\n                password,\r\n                email,\r\n                headers,\r\n                json: true\r\n            })\r\n            .then(res => {\r\n                if (res.data.hasBeenSuccessful === true){\r\n                    redirect = true;\r\n                    message = res.data.content.message;\r\n                } else {\r\n                    message = res.data.errors.error.message;\r\n                }\r\n                resolve([message, redirect]);\r\n            })\r\n            .catch(error => reject(error.message));\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}